1+1
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
View(example)
install.packages("ggplot2")
install.packages("glue")
version
sessionInfo()
help()
help(package = ggplot2)
browseVignettes()
browseVignettes("ggplot2")
help(package = devtools)
install.packages("devtools")
help(devtools)
sessionInfo()
library(KernSmooth, lib.loc = "C:/Program Files/R/R-3.6.3/library")
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s) && identical(x, x$get())) {
message("getting cached data")
return(s)
}
data <- x$get()
inv <- solve(data, ...)
x$setsolve(s)
s
}
m
m=matrix(c(1,0,0,0,1,0,0,0,0),3,3)
m
m1=makeCacheMatrix(m)
m1
m2 = cacheSolve(m1)
debug(cacheSolve)
m2 = cacheSolve(m1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s) && identical(x, x$get())) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
m2 = cacheSolve(m1)
debug(cacheSolve)
m2 = cacheSolve(m1)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s) && identical(x, x$get())) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
m=matrix(c(1,0,0,0,1,0,0,0,0),3,3)
m
m1=makeCacheMatrix(m)
m1
m1$getsolve
m2=cacheSolve(m1)
m2=cacheSolve(m)
m2=solve(m)
m
m=matrix(c(1,0,0,0,1,0,0,0,1),3,3)
m2=solve(m)
m2
m2=cacheSolve(m)
m2=cacheSolve(m1)
m1=makeCacheMatrix(m)
m2=cacheSolve(m1)
m2
m
m=matrix(c(1,2,3,5),2,2)
m
m2=cacheSolve(m)
debug(cacheSolve)
m2=cacheSolve(m)
x$getsolve(m)
m1
m1$getsolve(m)
m
m2=cacheSolve(m1)
m2
m
m1=makeCacheMatrix(m)
m2=cacheSolve(m1)
m2
setwd("D:/R_Training/datasciencecoursera/ProgrammingAssignment2")
